{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","todos","playload","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filterParams","filteredTodos","useMemo","todoFilter","currTodo","preparedTodo","title","toLowerCase","preparedQuery","includes","completed","length","className","map","id","onClick","currentTodoActions","classNames","SELECT_VALUES","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","filterActions","str","charAt","toUpperCase","slice","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","catch","Error","href","email","name","App","data","todoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"mOAgBaA,EALG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAGED,EAPM,iBAAyB,CAAEE,KAAM,uBA8BrCE,EAlBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAGhB,IAAK,qBACH,OAAO,KAGT,QACE,OAAOE,ICoCAL,EAhDI,SAACO,GAAD,MAAoC,CACnDL,KAAM,mBACNC,QAASI,IA8CEP,EA3CK,SAACQ,GAAD,MAAsC,CACtDN,KAAM,oBACNC,QAASK,IAyCER,EAtCO,iBAA0B,CAC5CE,KAAM,wBA2COO,EAxCO,WAMT,IALXJ,EAKU,uDALK,CACbE,MAAO,GACPC,OAAQ,OAEVF,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,mBACH,MAAO,CACLK,MAAOD,EAAOH,QACdK,OAAQH,EAAMG,QAIlB,IAAK,oBACH,MAAO,CACLD,MAAOF,EAAME,MACbC,OAAQF,EAAOH,SAInB,IAAK,sBACH,MAAO,CACLI,MAAO,GACPC,OAAQH,EAAMG,QAIlB,QACE,OAAOH,ICxCAL,EAlBK,SAACU,GAAD,MAAgC,CAChDR,KAAM,aACNS,SAAUD,IAkBGE,EAfM,WAGP,IAFZF,EAEW,uDAFK,GAChBJ,EACW,uCACX,MACO,eADCA,EAAOJ,KAEJI,EAAOK,SAGPD,GCdPG,EAAcC,0BAAgB,CAClCC,YAAaX,EACbY,OAAQP,EACRC,MAAOE,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,sCChBPC,EAAoCC,IACpCC,EAAkDC,I,OCGlDC,EAAW,WACtB,IAAMC,EAAWL,IACXZ,EAAQc,GAAe,SAAAnB,GAAK,OAAIA,EAAMK,SACtCK,EAAcS,GAAe,SAAAnB,GAAK,OAAIA,EAAMU,eAC5Ca,EAAeJ,GAAe,SAAAnB,GAAK,OAAIA,EAAMW,UAM7Ca,EAAgBC,mBAAQ,WAC5B,IAAMC,EAAarB,EAAMM,QAAO,SAAAgB,GAC9B,IAAMC,EAAeD,EAASE,MAAMC,cAC9BC,EAAgBR,EAAarB,MAAM4B,cAEzC,OAAOF,EAAaI,SAASD,MAG/B,OAAQR,EAAapB,QACnB,IAAK,MASL,QACE,OAAOuB,EAPT,IAAK,SACH,OAAOA,EAAWf,QAAO,SAAAgB,GAAQ,OAA2B,IAAvBA,EAASM,aAEhD,IAAK,YACH,OAAOP,EAAWf,QAAO,SAAAgB,GAAQ,OAA2B,IAAvBA,EAASM,gBAKjD,CAAC5B,EAAOkB,IAEX,OACE,mCAC4B,IAAzBC,EAAcU,OACb,oBAAIC,UAAU,0BAAd,kEAIA,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGX,EAAcY,KAAI,SAAAT,GAAQ,OACzB,qBACE,UAAQ,OADV,UAIE,oBAAIQ,UAAU,eAAd,SACGR,EAASU,KAEXV,EAASM,UACR,oBAAIE,UAAU,eAAd,SACE,sBAAMA,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAIjB,oBAAIA,UAAU,iBAEhB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWR,EAASM,UAChB,mBACA,kBAHN,SAKGN,EAASE,UAGd,oBAAIM,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVtC,KAAK,SACLyC,QAAS,WA/EzBhB,EAASiB,EA+E8BZ,KAJzB,SAME,sBAAMQ,UAAU,OAAhB,SACE,mBAAGA,UAAWK,IAAW,MAAO,CAC9B,gBAA2B,OAAX9B,QAAW,IAAXA,OAAA,EAAAA,EAAa2B,MAAOV,EAASU,GAC7C,UAAqB,OAAX3B,QAAW,IAAXA,OAAA,EAAAA,EAAa2B,MAAOV,EAASU,eAjC1CV,EAASU,eC9DxBI,EAAgB,CAAC,MAAO,SAAU,aAM3BC,EAAa,WACxB,IAAMpB,EAAWL,IAEXM,EAAeJ,GAAe,SAAAnB,GAAK,OAAIA,EAAMW,UAcnD,OACE,uBACEwB,UAAU,mBACVQ,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGV,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,wBACE,UAAQ,eACRW,MAAOvB,EAAapB,OACpB4C,SAAU,SAAAH,GAAK,OAlBNE,EAkBoBF,EAAMI,OAAOF,WAjBlDxB,EAAS2B,EAAwBH,IADjB,IAACA,GAeX,SAKGL,EAAcL,KAAI,SAAAU,GAAK,OACtB,wBACEA,MAAOA,EADT,UAlCiBI,EAsCQJ,EArC9BI,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GAAGvB,gBAmC/BgB,GApCS,IAACI,WA6CzB,oBAAGf,UAAU,sDAAb,UAME,uBACE,UAAQ,cACRtC,KAAK,OACLsC,UAAU,QACVmB,YAAY,YACZR,MAAOvB,EAAarB,MACpB6C,SAAU,SAACH,GAAD,OAhDAE,EAgDoBF,EAAMI,OAAOF,WA/CjDxB,EAAS2B,EAAuBH,IADjB,IAACA,KAkDZ,sBAAMX,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdZ,EAAarB,OACZ,sBACEiC,UAAU,gBACVoB,MAAO,CAAEC,cAAe,OAF1B,SAKE,wBACE,UAAQ,oBACR3D,KAAK,SACLsC,UAAU,SACVG,QAxDQ,WAClBhB,EAAS2B,iB,OCpBAQ,G,MAAmB,kBAC9B,qBAAKtB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASuB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICdMC,EAAY,WACvB,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAEMlD,EAAWL,IACXP,EAAcS,GAAe,SAAAnB,GAAK,OAAIA,EAAMU,eAclD,OARA+D,qBAAU,WDMW,IAACC,ECLhBhE,IDKgBgE,ECJVhE,EAAYgE,ODIiBhB,EAAG,iBAAiBgB,KCHtDT,KAAKO,GACLG,OAAM,kBAAM,IAAIC,MAAM,oDAE1B,CAAClE,IAGF,sBAAKyB,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEboC,EAGA,sBAAKpC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,sBACEA,UAAU,0CACV,UAAQ,eAFV,0BAKGzB,QALH,IAKGA,OALH,EAKGA,EAAa2B,MAIhB,wBACExC,KAAK,SACLsC,UAAU,SACV,UAAQ,cACRG,QAlCO,WACjBhB,EAASiB,WAqCH,sBAAKJ,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGzB,QADH,IACGA,OADH,EACGA,EAAamB,QAGhB,oBAAGM,UAAU,QAAQ,UAAQ,aAA7B,UACc,OAAXzB,QAAW,IAAXA,KAAauB,UACZ,wBAAQE,UAAU,mBAAlB,kBAIA,wBAAQA,UAAU,kBAAlB,qBAKD,OAED,mBAAG0C,KAAI,iBAAYN,EAAKO,OAAxB,SACGP,EAAKQ,gBAxCd,cAAC,EAAD,QCjBKC,EAAM,WACjB,IAAM1D,EAAWL,IACXZ,EAAQc,GAAe,SAAAnB,GAAK,OAAIA,EAAMK,SACtCK,EAAcS,GAAe,SAAAnB,GAAK,OAAIA,EAAMU,eAOlD,OALA+D,qBAAU,WFGkBf,EAAY,UEDnCO,MAAK,SAAAgB,GAAI,OAAI3D,EAAS4D,EAAsBD,SAC9C,IAGD,qCACE,qBAAK9C,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACI9B,EAAM6B,OAGN,cAAC,EAAD,IAFA,cAAC,EAAD,aASTxB,GACC,cAAC,EAAD,QCvCFyE,EAAO,kBACX,cAAC,IAAD,CAAUvE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNwE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.be549bd9.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET': {\n      return action.payload;\n    }\n\n    case 'currentTodo/REMOVE': {\n      return null;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype RemoveQueryAction = {\n  type: 'filter/REMOVE_QUERY';\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS'\n  payload: string;\n};\n\ntype Action = SetQueryAction\n| RemoveQueryAction\n| SetStatusAction;\n\ntype State = {\n  query: string,\n  status: string,\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: string): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst removeQuery = (): RemoveQueryAction => ({\n  type: 'filter/REMOVE_QUERY',\n});\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: 'all',\n  },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY': {\n      return {\n        query: action.payload,\n        status: state.status,\n      };\n    }\n\n    case 'filter/SET_STATUS': {\n      return {\n        query: state.query,\n        status: action.payload,\n      };\n    }\n\n    case 'filter/REMOVE_QUERY': {\n      return {\n        query: '',\n        status: state.status,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  setQuery,\n  setStatus,\n  removeQuery,\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadAction = {\n  type: 'todos/LOAD',\n  playload: Todo[],\n};\n\ntype Action = LoadAction;\n\nconst loadTodos = (todos: Todo[]): LoadAction => ({\n  type: 'todos/LOAD',\n  playload: todos,\n});\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return action.playload;\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { loadTodos };\n\nexport default todosReducer;\n","/* eslint-disable import/no-extraneous-dependencies */\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const filterParams = useAppSelector(state => state.filter);\n\n  const setTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const filteredTodos = useMemo(() => {\n    const todoFilter = todos.filter(currTodo => {\n      const preparedTodo = currTodo.title.toLowerCase();\n      const preparedQuery = filterParams.query.toLowerCase();\n\n      return preparedTodo.includes(preparedQuery);\n    });\n\n    switch (filterParams.status) {\n      case 'all':\n        return todoFilter;\n\n      case 'active':\n        return todoFilter.filter(currTodo => currTodo.completed === false);\n\n      case 'completed':\n        return todoFilter.filter(currTodo => currTodo.completed === true);\n\n      default:\n        return todoFilter;\n    }\n  }, [todos, filterParams]);\n\n  return (\n    <>\n      {filteredTodos.length === 0 ? (\n        <h1 className=\"notofication is-warning\">\n          There are not todos matching current filter criteria\n        </h1>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(currTodo => (\n              <tr\n                data-cy=\"todo\"\n                key={currTodo.id}\n              >\n                <td className=\"is-vcentered\">\n                  {currTodo.id}\n                </td>\n                {currTodo.completed ? (\n                  <td className=\"is-vcentered\">\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  </td>\n                ) : (\n                  <td className=\"is-vcentered\" />\n                )}\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={currTodo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'}\n                  >\n                    {currTodo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setTodo(currTodo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('far', {\n                        'fa-eye-slash': currentTodo?.id === currTodo.id,\n                        'fa-eye': currentTodo?.id !== currTodo.id,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nconst SELECT_VALUES = ['all', 'active', 'completed'];\n\nconst capitalizeFirstLetter = (str: string) => {\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n\nexport const TodoFilter = () => {\n  const dispatch = useAppDispatch();\n\n  const filterParams = useAppSelector(state => state.filter);\n\n  const setQuery = (value: string) => {\n    dispatch(filterActions.setQuery(value));\n  };\n\n  const setStatus = (value: string) => {\n    dispatch(filterActions.setStatus(value));\n  };\n\n  const removeQuery = () => {\n    dispatch(filterActions.removeQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterParams.status}\n            onChange={event => setStatus(event.target.value)}\n          >\n            {SELECT_VALUES.map(value => (\n              <option\n                value={value}\n                key={value}\n              >\n                {capitalizeFirstLetter(value)}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"\n        control\n        is-expanded\n        has-icons-left\n        has-icons-right\"\n      >\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filterParams.query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filterParams.query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={removeQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal = () => {\n  const [user, setUser] = useState<User>();\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const removeTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch(() => new Error('Something went wrong, let\\'s try again later'));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {currentTodo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">\n                  Done\n                </strong>\n              ) : (\n                <strong className=\"has-text-danger\">\n                  Planned\n                </strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todoActions } from './features/todos';\n\nexport const App = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos()\n      .then(data => dispatch(todoActions.loadTodos(data)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}